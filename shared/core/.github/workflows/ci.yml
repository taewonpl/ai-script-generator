name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run ruff
      run: |
        ruff check src/ tests/ scripts/
        ruff format --check src/ tests/ scripts/

    - name: Run mypy
      run: mypy src/ai_script_core/ --strict

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[testing]

    - name: Run runtime tests
      run: python scripts/runtime_test.py

    - name: Run pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Test clean install
      run: |
        pip install dist/*.whl
        python -c "import ai_script_core; print(f'Successfully installed {ai_script_core.__version__}')"

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: dist/

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: packages
        path: dist/

    - name: Run build test script
      run: |
        chmod +x scripts/build_test.sh
        bash scripts/build_test.sh

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security scan
      run: bandit -r src/ -f json -o bandit-report.json || true

    - name: Run safety check
      run: |
        pip install -e .
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [lint, test, build, integration-test]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: release
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/* || true

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install mkdocs mkdocs-material mkdocstrings[python]

    - name: Build documentation
      run: |
        # Create basic mkdocs structure if needed
        if [ ! -f mkdocs.yml ]; then
          echo "Creating basic documentation structure..."
          mkdir -p docs
          echo "# AI Script Core Documentation" > docs/index.md
          echo "## Installation" >> docs/index.md
          echo '```bash' >> docs/index.md
          echo 'pip install ai-script-core' >> docs/index.md
          echo '```' >> docs/index.md
        fi

    - name: Deploy to GitHub Pages
      if: success()
      run: |
        echo "Documentation deployment would go here"
        # mkdocs gh-deploy --force
