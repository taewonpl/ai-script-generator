[build-system]
requires = ["setuptools>=70", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-script-core"
version = "0.1.0"
description = "Core DTOs and utilities for AI script services"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "AI Script Generator Team", email = "team@ai-script-generator.com"}
]
maintainers = [
    {name = "AI Script Generator Team", email = "team@ai-script-generator.com"}
]
keywords = [
    "ai", "script", "generator", "microservices", "fastapi",
    "pydantic", "logging", "configuration", "utilities", "schemas"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: System :: Logging",
    "Topic :: Utilities",
    "Framework :: FastAPI",
    "Framework :: Pydantic",
    "Typing :: Typed",
]

# Core dependencies - minimal for better compatibility
dependencies = [
    "pydantic>=2.5.0,<3.0.0",
    "pydantic-settings>=2.1.0,<3.0.0",
    "python-dotenv>=1.0.0",
    "fastapi>=0.104.1",
    "requests>=2.31.0",
    "aiohttp>=3.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "mypy>=1.7.0",
    "types-redis>=4.6.0",
    "types-requests>=2.31.0",
    "types-aiohttp>=3.9.0",
    "ruff>=0.1.6",
    "pre-commit>=3.5.0",
    "twine>=4.0.2",
    "build>=1.0.3",
]
testing = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "coverage>=7.3.2",
]
logging = [
    "structlog>=23.0.0",
    "colorama>=0.4.6",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
]

[project.urls]
Homepage = "https://github.com/ai-script-generator/ai-script-generator-v3"
Documentation = "https://ai-script-generator.readthedocs.io/"
Repository = "https://github.com/ai-script-generator/ai-script-generator-v3"
"Bug Reports" = "https://github.com/ai-script-generator/ai-script-generator-v3/issues"
Changelog = "https://github.com/ai-script-generator/ai-script-generator-v3/blob/main/CHANGELOG.md"
Funding = "https://github.com/sponsors/ai-script-generator"

# Console scripts removed - use make/npm scripts instead for commands

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["ai_script_core*"]

[tool.setuptools.package-data]
ai_script_core = ["py.typed"]

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.isort]
known-first-party = ["ai_script_core"]

# MyPy configuration - Maximum type safety
[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = true
disallow_any_expr = false  # Too strict for FastAPI/Pydantic
disallow_any_decorated = false  # FastAPI decorators need this
disallow_any_explicit = false  # Allowing explicit Any for logging/exceptions metadata
disallow_any_generics = true
disallow_subclassing_any = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict_concatenate = true
# Additional strict checks
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
# Exclude test files from strictest checks
exclude = [
    "tests/.*",
    "test_.*\\.py$",
    "quick_test\\.py$"
]

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
show_missing = true
fail_under = 85
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
