
services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-script-postgres
    environment:
      POSTGRES_DB: ai_script_generator
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - ai-script-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: ai-script-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ai-script-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: ai-script-chromadb
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma_data
      - ANONYMIZED_TELEMETRY=${CHROMA_ANONYMIZED_TELEMETRY:-TRUE}
    volumes:
      - chroma_data:/chroma/chroma_data
    ports:
      - "8004:8000"
    networks:
      - ai-script-network
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/localhost/8000' || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped


  # Project Service
  project-service:
    build:
      context: .
      dockerfile: services/project-service/Dockerfile
    container_name: ai-script-project-service
    env_file: .env
    environment:
      - DATABASE_URL=sqlite:///app/data/projects.db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/1
      - API_PORT=8001
      - ENVIRONMENT=${ENVIRONMENT:-production}
    ports:
      - "8001:8001"
    networks:
      - ai-script-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - project_data:/app/data

  # Generation Service
  generation-service:
    build:
      context: .
      dockerfile: services/generation-service/Dockerfile
    container_name: ai-script-generation-service
    env_file: .env
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/2
      - CHROMADB_URL=http://chromadb:8000
      - CHROMA_URL=http://chromadb:8000
      - PROJECT_SERVICE_URL=http://project-service:8001
      - API_PORT=8002
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    ports:
      - "8002:8002"
    networks:
      - ai-script-network
    depends_on:
      redis:
        condition: service_healthy
      chromadb:
        condition: service_healthy
      project-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - generation_data:/app/data

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_PROJECT_SERVICE_URL=http://localhost:8001
        - VITE_GENERATION_SERVICE_URL=http://localhost:8002
        - VITE_ENV=production
    container_name: ai-script-frontend
    environment:
      - CORE_SERVICE_URL=http://project-service:8001
      - PROJECT_SERVICE_URL=http://project-service:8001
      - GENERATION_SERVICE_URL=http://generation-service:8002
    ports:
      - "3000:80"
    networks:
      - ai-script-network
    depends_on:
      project-service:
        condition: service_healthy
      generation-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

networks:
  ai-script-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local
  project_data:
    driver: local
  generation_data:
    driver: local
