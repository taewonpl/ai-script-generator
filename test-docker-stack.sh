#!/bin/bash

# AI Script Generator v3.0 - Docker Stack Test Script
# Tests the full stack deployment and validates all services

set -e

echo "üöÄ AI Script Generator v3.0 - Docker Stack Test"
echo "=================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if Docker is running
echo "üîç Checking Docker daemon..."
if ! docker info >/dev/null 2>&1; then
    echo -e "${RED}‚ùå Docker daemon is not running. Please start Docker first.${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Docker daemon is running${NC}"

# Check if .env file exists
if [ ! -f .env ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  .env file not found. Copying from .env.example...${NC}"
    cp .env.example .env
    echo -e "${YELLOW}‚ö†Ô∏è  Please edit .env file with your actual API keys before running in production${NC}"
fi

# Validate docker-compose configuration
echo "üîç Validating docker-compose configuration..."
if docker compose config --quiet; then
    echo -e "${GREEN}‚úÖ Docker Compose configuration is valid${NC}"
else
    echo -e "${RED}‚ùå Docker Compose configuration has errors${NC}"
    exit 1
fi

# Function to check service health
check_service_health() {
    local service_name=$1
    local health_url=$2
    local max_attempts=30
    local attempt=1
    
    echo "üîç Checking $service_name health..."
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f -s "$health_url" >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ $service_name is healthy${NC}"
            return 0
        fi
        
        echo "‚è≥ Attempt $attempt/$max_attempts - waiting for $service_name..."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    echo -e "${RED}‚ùå $service_name health check failed after $max_attempts attempts${NC}"
    return 1
}

# Function to show service logs on error
show_logs() {
    local service=$1
    echo -e "${YELLOW}üìã Last 20 lines of $service logs:${NC}"
    docker compose logs --tail=20 "$service" || echo "Could not retrieve logs for $service"
}

# Build and start services
echo "üèóÔ∏è  Building and starting services..."
if docker compose up -d --build; then
    echo -e "${GREEN}‚úÖ Services started successfully${NC}"
else
    echo -e "${RED}‚ùå Failed to start services${NC}"
    docker compose logs
    exit 1
fi

# Wait a moment for services to initialize
echo "‚è≥ Waiting for services to initialize..."
sleep 10

# Check individual service health
echo "üîç Performing health checks..."

# Check PostgreSQL
echo "üîç Checking PostgreSQL..."
if docker compose exec -T postgres pg_isready -U postgres >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ PostgreSQL is ready${NC}"
else
    echo -e "${RED}‚ùå PostgreSQL is not ready${NC}"
    show_logs postgres
fi

# Check Redis
echo "üîç Checking Redis..."
if docker compose exec -T redis redis-cli ping >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Redis is ready${NC}"
else
    echo -e "${RED}‚ùå Redis is not ready${NC}"
    show_logs redis
fi

# Check ChromaDB
echo "üîç Checking ChromaDB..."
if check_service_health "ChromaDB" "http://localhost:8004/api/v1/heartbeat"; then
    echo -e "${GREEN}‚úÖ ChromaDB is ready${NC}"
else
    echo -e "${RED}‚ùå ChromaDB health check failed${NC}"
    show_logs chromadb
fi

# Check Project Service
if check_service_health "Project Service" "http://localhost:8001/api/v1/health"; then
    echo -e "${GREEN}‚úÖ Project Service is ready${NC}"
else
    echo -e "${RED}‚ùå Project Service health check failed${NC}"
    show_logs project-service
fi

# Check Generation Service
if check_service_health "Generation Service" "http://localhost:8002/api/v1/health"; then
    echo -e "${GREEN}‚úÖ Generation Service is ready${NC}"
else
    echo -e "${RED}‚ùå Generation Service health check failed${NC}"
    show_logs generation-service
fi

# Check Frontend
if check_service_health "Frontend" "http://localhost:3000"; then
    echo -e "${GREEN}‚úÖ Frontend is ready${NC}"
else
    echo -e "${RED}‚ùå Frontend health check failed${NC}"
    show_logs frontend
fi

echo ""
echo "üéâ Docker Stack Test Complete!"
echo "================================"
echo "Services running on:"
echo "  ‚Ä¢ Frontend:           http://localhost:3000"
echo "  ‚Ä¢ Project Service:    http://localhost:8001"
echo "  ‚Ä¢ Generation Service: http://localhost:8002"
echo "  ‚Ä¢ ChromaDB:          http://localhost:8004"
echo "  ‚Ä¢ PostgreSQL:        localhost:5432"
echo "  ‚Ä¢ Redis:             localhost:6379"
echo ""
echo "API Documentation:"
echo "  ‚Ä¢ Project Service:    http://localhost:8001/docs"
echo "  ‚Ä¢ Generation Service: http://localhost:8002/docs"
echo ""
echo "To stop the stack: docker compose down"
echo "To view logs: docker compose logs [service-name]"