# CI/CD Pipeline for Generation Service
name: Generation Service CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/generation-service

jobs:
  # Code Quality and Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Code formatting check (Black)
        run: black --check --diff src/ tests/

      - name: Import sorting check (isort)
        run: isort --check-only --diff src/ tests/

      - name: Linting (flake8)
        run: flake8 src/ tests/

      - name: Type checking (mypy)
        run: mypy src/
        continue-on-error: true

      - name: Security scan (bandit)
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Dependency vulnerability scan
        run: |
          pip install safety
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Upload vulnerability scan results
        uses: actions/upload-artifact@v3
        with:
          name: safety-report
          path: safety-report.json

  # Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        test-type: [unit, integration, performance]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          pytest tests/unit/ -v --cov=src/generation_service \
            --cov-report=xml --cov-report=html --cov-report=term \
            --cov-fail-under=80 --junit-xml=junit-unit.xml

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          ENVIRONMENT: testing
        run: |
          pytest tests/integration/ -v --junit-xml=junit-integration.xml

      - name: Run performance tests
        if: matrix.test-type == 'performance'
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          ENVIRONMENT: testing
        run: |
          pytest tests/performance/ -v --junit-xml=junit-performance.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            junit-*.xml
            htmlcov/
            coverage.xml

      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Docker Build and Security Scan
  docker-build:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Docker Scout CVE scan
        if: github.event_name == 'pull_request'
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ steps.meta.outputs.tags }}
          to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          ignore-unchanged: true

  # Performance Validation
  performance-validation:
    name: Performance Validation
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Start service with Docker
        run: |
          docker run -d --name generation-service \
            --network host \
            -e ENVIRONMENT=testing \
            -e REDIS_HOST=localhost \
            -e REDIS_PORT=6379 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Wait for service to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/api/monitoring/health; do sleep 2; done'

      - name: Run performance validation
        run: |
          python -c "
          import asyncio
          from tests.performance.performance_validator import run_performance_validation

          async def main():
              results = await run_performance_validation()
              print(f'Performance validation: {results[\"overall_status\"]}')
              if results['overall_status'] != 'PASS':
                  exit(1)

          asyncio.run(main())
          "

      - name: Run load tests
        run: |
          python -c "
          import asyncio
          from tests.performance.load_tester import run_full_validation

          async def main():
              results = await run_full_validation()
              validation = results.get('performance_validation', {})
              score = validation.get('validation_score', 0.0)
              print(f'Load test validation score: {score:.2f}')
              if score < 0.8:
                  exit(1)

          asyncio.run(main())
          "

      - name: Stop service
        if: always()
        run: docker stop generation-service && docker rm generation-service

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, performance-validation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ needs.docker-build.outputs.image-tag }}"
          # Add actual deployment commands here
          # e.g., kubectl, helm, docker-compose, etc.

      - name: Run staging health check
        run: |
          echo "Running staging health check..."
          # Add health check commands for staging
          curl -f https://staging.example.com/api/monitoring/health

      - name: Run staging smoke tests
        run: |
          echo "Running staging smoke tests..."
          # Add smoke test commands

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ needs.docker-build.outputs.image-tag }}"
          # Add actual deployment commands here

      - name: Run production health check
        run: |
          echo "Running production health check..."
          # Add health check commands for production
          curl -f https://production.example.com/api/monitoring/health

      - name: Run production smoke tests
        run: |
          echo "Running production smoke tests..."
          # Add smoke test commands

      - name: Notify deployment success
        run: |
          echo "Production deployment successful!"
          # Add notification logic (Slack, email, etc.)

  # Generate and upload reports
  reports:
    name: Generate Reports
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate consolidated report
        run: |
          echo "# Generation Service CI/CD Report" > report.md
          echo "" >> report.md
          echo "## Build Information" >> report.md
          echo "- **Branch:** ${{ github.ref_name }}" >> report.md
          echo "- **Commit:** ${{ github.sha }}" >> report.md
          echo "- **Workflow:** ${{ github.run_number }}" >> report.md
          echo "" >> report.md

          echo "## Test Results" >> report.md
          if [ -d "test-results-unit" ]; then
            echo "- ✅ Unit tests completed" >> report.md
          else
            echo "- ❌ Unit tests failed" >> report.md
          fi

          if [ -d "test-results-integration" ]; then
            echo "- ✅ Integration tests completed" >> report.md
          else
            echo "- ❌ Integration tests failed" >> report.md
          fi

          if [ -d "test-results-performance" ]; then
            echo "- ✅ Performance tests completed" >> report.md
          else
            echo "- ❌ Performance tests failed" >> report.md
          fi

          echo "" >> report.md
          echo "## Security Scans" >> report.md
          if [ -f "bandit-report/bandit-report.json" ]; then
            echo "- ✅ Security scan completed" >> report.md
          fi

          if [ -f "safety-report/safety-report.json" ]; then
            echo "- ✅ Dependency scan completed" >> report.md
          fi

      - name: Upload consolidated report
        uses: actions/upload-artifact@v3
        with:
          name: ci-cd-report
          path: report.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
