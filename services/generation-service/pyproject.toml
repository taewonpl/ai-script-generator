[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-script-generation-service"
version = "3.0.0"
description = "AI Script Generator v3.0 - Generation Service"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "AI Script Generator Team"}
]
keywords = ["ai", "script", "generation", "fastapi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic[email]>=2.5.0",
    "pydantic-settings>=2.1.0",
    "sqlalchemy[asyncio]==2.0.25",
    "httpx>=0.25.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "redis>=5.0.0",
]

[project.optional-dependencies]
ai = [
    "openai>=1.3.0",
    "anthropic>=0.7.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]
testing = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "coverage>=7.3.2",
]

[project.urls]
Homepage = "https://github.com/ai-script-generator/generation-service"
Repository = "https://github.com/ai-script-generator/generation-service"

[project.scripts]
typecheck = "mypy src --strict"
"typecheck:watch" = "watchdog-run --patterns='*.py' --recursive --command='mypy src --strict' src"
build = "mypy src --strict && python -m build"
lint = "ruff check src"
"lint:fix" = "ruff check --fix src && ruff format src"
format = "ruff format src"
"format:check" = "ruff format --check src"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

# Ruff configuration - unified with other services
[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["generation_service", "ai_script_core"]

[tool.mypy]
python_version = "3.10"
# Strictness - Maximum type safety
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = true
disallow_any_expr = false  # Too strict for FastAPI dependencies
disallow_any_decorated = false  # FastAPI decorators need this
disallow_any_explicit = false  # Allowing explicit Any for logging/exceptions metadata
disallow_any_generics = true
disallow_subclassing_any = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict_concatenate = true
# Additional strict checks
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
extra_checks = true
# Exclude test files from strictest checks
exclude = [
    "tests/.*",
    "test_.*\\.py$"
]

[[tool.mypy.overrides]]
module = [
    "uvicorn.*",
    "openai.*",
    "anthropic.*",
    "redis.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=generation_service",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
show_missing = true
fail_under = 85
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
