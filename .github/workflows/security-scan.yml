name: Security Scan and CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Secret Scanning with Gitleaks
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}
      with:
        args: --verbose --redact
        
    - name: Upload Gitleaks Report
      uses: github/codeql-action/upload-sarif@v2
      if: failure()
      with:
        sarif_file: results.sarif

  # Static Code Analysis
  code-analysis:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy bandit safety semgrep
        
    - name: Run Ruff (linting)
      run: |
        ruff check services/ shared/ --output-format=github
        
    - name: Run MyPy (type checking)
      run: |
        mypy services/project-service/src services/generation-service/src --strict
        
    - name: Run Bandit (security linting)
      run: |
        bandit -r services/ -f json -o bandit-report.json
        
    - name: Run Safety (dependency vulnerabilities)
      run: |
        safety check --json --output safety-report.json
        
    - name: Run Semgrep (SAST)
      run: |
        semgrep --config=auto services/ --json --output semgrep-report.json
        
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  # Frontend Security Checks
  frontend-security:
    name: Frontend Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level=moderate --json > npm-audit-report.json
        
    - name: Run ESLint security rules
      run: |
        cd frontend
        npx eslint src/ --ext .ts,.tsx --format json -o eslint-security-report.json
        
    - name: Upload Frontend Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-security-reports
        path: |
          frontend/npm-audit-report.json
          frontend/eslint-security-report.json

  # Container Image Security Scanning
  container-security:
    name: Container Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build Project Service Image
      uses: docker/build-push-action@v4
      with:
        context: services/project-service
        tags: project-service:test
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build Generation Service Image  
      uses: docker/build-push-action@v4
      with:
        context: services/generation-service
        tags: generation-service:test
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner - Project Service
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'project-service:test'
        format: 'sarif'
        output: 'project-service-trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Run Trivy vulnerability scanner - Generation Service
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'generation-service:test'
        format: 'sarif'
        output: 'generation-service-trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: project-service-trivy-results.sarif
        
    - name: Upload Generation Service Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'generation-service-trivy-results.sarif'

  # Multi-Platform Testing Matrix
  test-matrix:
    name: Test Suite - Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.11"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r services/project-service/requirements.txt
        pip install -r services/generation-service/requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Run Project Service Tests
      run: |
        cd services/project-service
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term
        
    - name: Run Generation Service Tests
      run: |
        cd services/generation-service
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: services/
        flags: python-${{ matrix.python-version }}

  # Security Policy Compliance Check
  compliance-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check required security files
      run: |
        echo "Checking for required security files..."
        
        # Check for security policy
        if [ ! -f "SECURITY.md" ]; then
          echo "❌ SECURITY.md file missing"
          exit 1
        fi
        
        # Check for secrets baseline
        if [ ! -f ".secrets.baseline" ]; then
          echo "❌ .secrets.baseline file missing"  
          exit 1
        fi
        
        # Check for security-related config files
        if [ ! -f ".github/workflows/security-scan.yml" ]; then
          echo "❌ Security scan workflow missing"
          exit 1
        fi
        
        echo "✅ All required security files present"
        
    - name: Validate Kubernetes security contexts
      run: |
        echo "Validating Kubernetes security settings..."
        
        # Check that runAsNonRoot is set
        if ! grep -q "runAsNonRoot: true" k8s-manifests.yaml; then
          echo "❌ runAsNonRoot not set in Kubernetes manifests"
          exit 1
        fi
        
        # Check that resource limits are defined
        if ! grep -q "limits:" k8s-manifests.yaml; then
          echo "❌ Resource limits not defined in Kubernetes manifests"
          exit 1
        fi
        
        echo "✅ Kubernetes security contexts validated"
        
  # Build and Push Production Images (only on main branch)
  build-production:
    name: Build Production Images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [secret-scan, code-analysis, frontend-security, container-security, test-matrix, compliance-check]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Project Service
      uses: docker/build-push-action@v4
      with:
        context: services/project-service
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/project-service:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Generation Service
      uses: docker/build-push-action@v4
      with:
        context: services/generation-service
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/generation-service:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  # Deployment to staging (automated)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build-production]
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Staging Cluster
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add your staging deployment commands here
        echo "✅ Staging deployment completed"
        
  # Production deployment approval gate
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [deploy-staging]
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Production Cluster
      run: |
        echo "🎯 Deploying to production environment..."
        # Add your production deployment commands here
        echo "✅ Production deployment completed"
        
    - name: Post-deployment verification
      run: |
        echo "🔍 Running post-deployment health checks..."
        # Add your health check commands here
        echo "✅ Post-deployment verification completed"