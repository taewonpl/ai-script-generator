# Production docker-compose configuration
version: '3.8'

services:
  # Production database with SSL and performance tuning
  postgres:
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.8
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    # Remove port exposure for security
    ports: []
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Production Redis with performance settings
  redis:
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    # Remove port exposure for security
    ports: []
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Production ChromaDB with authentication
  chromadb:
    environment:
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=${CHROMA_AUTH_PROVIDER}
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMA_AUTH_CREDENTIALS}
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["http://generation-service:8000"]
    # Remove port exposure for security
    ports: []
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Production Project Service
  project-service:
    environment:
      - DEBUG=false
      - PROJECT_SERVICE_RELOAD=false
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - WORKERS=${PROJECT_WORKERS:-2}
    # Only expose through reverse proxy
    ports: []
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Production Generation Service
  generation-service:
    environment:
      - DEBUG=false
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - WORKERS=${GENERATION_WORKERS:-2}
      - MAX_CONCURRENT_GENERATIONS=${MAX_CONCURRENT_GENERATIONS:-10}
    # Only expose through reverse proxy
    ports: []
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - project-service
      - generation-service
    networks:
      - ai-script-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Log aggregation service
  fluentd:
    image: fluent/fluentd:v1.16-1
    restart: unless-stopped
    volumes:
      - ./infrastructure/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - fluentd_logs:/fluentd/log
    networks:
      - ai-script-network
    depends_on:
      - project-service
      - generation-service

volumes:
  postgres_logs:
    driver: local
  nginx_logs:
    driver: local
  fluentd_logs:
    driver: local

networks:
  ai-script-network:
    driver: bridge
    name: ai-script-network
